(ns app.core
  (:require [reagent.core :as r]
            [reagent.dom :as dom]
            [stylo.core :refer [c c?]]
            [reitit.frontend :as rf]
            [reitit.frontend.easy :as rfe]
            [reitit.coercion.spec :as rss]))

(def compiler
  (r/create-compiler {:function-components true}))

(defn p [content] 
  {:pre (string? p)}
  [:p {:class (c [:mt 1] :text-base :text-gray-500)}
   content])

(defn about []
  [:div {:class (c :w-full :flex)}
   [:div {:class (c [:w-min 0] :flex-auto [:px 4])}
    [:div {:class (c [:pb 10] :border-b [:border :gray-200] [:mb 10])} 
     [:p {:class (c [:m 1] :text-base :text-gray-500)}
   "StyloCSS library is based on macro, so we need some alchemy to make it work in ClojureScript environment.
    We assume that the result will worth the effort. It was inspired by Tailwind CSS. 
    It develops an idea of storing all css in one place without actually touching any .css file.
    Intall the Style library and keep your focus on styling, not typing. Let the macro do the rest of routine."]]]])

(defn installation []
  [:div
      [:h1 {:class (c [:m 1] :text-3xl :inline-block :extrabold [:text :gray-900] :tracking-tight)}
       "Installation"]
      [:p {:class (c [:m 1] :text-lg :text-gray-500)}
       "Learn to set up shadow-cljs from the scratch in your project. "]
      [:p {:class (c [:m 1] :text-base :text-gray-500)}
       "1. We create a shadowcljs template:"
       [:div {:style {:background-color :black :width :min-content :border-radius "6px"}
              :class (c [:m 1])}
        [:pre {:class (c [:text :white])}
         "lein new shadow-cljs shadow-example +reagent;"]
        [:pre {:class (c [:text :white])}
         "npm install"]]
       [:p {:class (c [:m 1] :text-base :text-gray-500)}
        "Other available options of shadow-cljs are given here: "]
       [:a {:href "https://github.com/shadow-cljs/lein-template"
            :class (c [:text :blue-300] :underline)} "https://github.com/shadow-cljs/lein-template"]]
      [:p {:class (c [:m 1] :text-base :text-gray-500)}
       "2. Add " [:pre "[stylo-css \"0.1.0 \"]"] " into dependencies."]
      [:p {:class (c [:m 2] :text-base :text-gray-500)}
       " 3. Open up your shadow-cljs.edn configuration file and add"
       [:div {:style {:background-color :black :width :min-content :border-radius "6px"}}
        [:pre {:class (c [:text :white] [:m 2])}
         ":build-hooks [(stylo.shadow/reload {PATH-TO-CSS})]"]]
       "  into the :app configuration. {PATH-TO-CSS} - is a path where the css file will be generated."
       "  Our configuration should look like this: "
       [:div {:style {:background-color :black :width :min-content :border-radius "6px"}}
        [:pre {:class (c [:text :white] [:m 2])}
         "{... 
                :builds
                    {:app 
                         {... 
                            :build-hooks [(stylo.shadow/reload \"public/out/stylo/css/stylo.css\")]}}}"]]]

      [:p {:class (c [:m 2] :text-base :text-gray-500)}
       "4. Open public/index.html file, it is generated by shadow-cljs by default. We should add the new source of css into it. "]
      [:p {:class (c [:m 2] :text-base :text-gray-500)}
       "Add the following into the <head> </head> section: "]
      [:div {:style {:background-color :black :width :min-content :border-radius "6px"}}
       [:pre {:class (c [:text :white] [:m 2])} " <link href= {PATH-TO-CSS} rel= \"stylesheet\">"]]
      [:p {:class (c [:m 2] :text-base :text-gray-500)}
       "5. So, you it is time to use the library. 
           Comprehensive documetation may be read by the link:  "
       [:a {:href "github.com/stylo-css/docs"
            :class (c [:text :blue-300] :underline)} " github.com/stylo-css/docs"]
       "  The basic syntax is the following: "]
      [:div {:style {:background-color :black :width :min-content :border-radius "6px"}}
       [:pre {:class (c [:text :white] [:m 2])} "[:div {:class (c [:pt 8] :h-screen)}] "]]
      [:ul {:class (c [:m 2])}
       [:li (p "c - is our macro, it waits for classes alias as arguments ")]
       [:li (p ":h-screen [:pt 8] - class alias ")]
       [:li (p "when class needs some configuration - it is passed as a vector [:pt 8] - where :pt is class alias and 6 - it's value ")]]])


(defn home-page []
  [:div
   [:h2 "Welcome to frontend"]])

(defonce match (r/atom nil))

(defn current-page []
  [:div
   [:ul
    [:li [:a {:href (rfe/href ::frontpage)} "About"]]
    [:li [:a {:href (rfe/href ::about)} "Installation"]]]
   (when @match
     (let [view (:view (:data @match))]
       [view @match]))])

(def routes
  [["/"
    {:name ::frontpage
     :view about}]

   ["/about"
    {:name ::about
     :view installation}]])

(defn init! []
  (rfe/start!
   (rf/router routes {:data {:coercion rss/coercion}})
   (fn [m] (reset! match m))
    ;; set to false to enable HistoryAPI
   {:use-fragment true})
  (dom/render
   [current-page]
   (js/document.getElementById "app")
   compiler))

(init!)

